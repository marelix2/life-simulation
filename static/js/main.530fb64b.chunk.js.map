{"version":3,"sources":["View/utils.js","Form/RangeInput.jsx","Form/Form.jsx","View/constants.js","View/n.js","View/nn.js","View/creature.js","View/plant.js","View/View.jsx","App.js","index.js"],"names":["mainInterval","ctx","RangeInput","label","otherProps","Typography","variant","Slider","useStyles","makeStyles","theme","wrapper","margin","spacing","width","background","controlButtons","marginBottom","divider","Form","started","creatureFields","rangeFields","energyFields","handleStart","handleStop","handleReset","classes","Grid","container","direction","justify","className","map","fieldProps","item","key","id","TextField","type","required","disabled","Divider","alignItems","Button","color","onClick","window","DEFAULT_SETTINGS","NEURON_SETTINGS","PLANT_SETTINGS","createNeuron","weights","stimulate","stimulation","stimulantsNumber","length","e","i","createNN","neurons","Array","k","decide","stimulations","min","max","indexes","push","Math","floor","random","randomize","cloneWithMutation","child","mutatedWeight","cross","partner","randomInt","distance","creatureA","creatureB","diagonal","sqrt","pow","X","Y","createCreature","locationCoordinateX","locationCoordinateY","mapSize","creaturesStartingEnergy","energy","nn","normalizeEnergy","age","clone","locationX","locationY","breed","react","plantSin","plantCos","decision","draw","fillStyle","centerX","canvas","centerY","height","rectWidth","rectHeight","fillRect","randomizeLocation","moveCreature","creatures","plants","creaturesLifespan","closestPlantid","smallestDistance","getClosestPlant","reaction","sin","cos","distanceToClosestPlant","closestCreatureid","getClosestCreature","splice","newCreatures","newPlants","createPlant","globalAlpha","sow","worldMaxEnergy","plantsEnergy","plantNumber","getCreaturesTotalEnergy","plantsCount","getPlantsEnergyTotal","loop","props","drawWorld","clearInterval","creaturesMinCount","fillCount","creature","createCreaturesTillMinimum","clearRect","creaturesCount","context","creaturesInitCount","rest","populate","setInterval","speed","form","View","useState","setContext","setStarted","setCreaturesInitCount","setCreaturesMinCount","setCreaturesLifespan","setCreaturesStartingEnergy","setWorldMaxEnergy","setPlantsEnergy","setMapSize","setSpeed","value","onChange","target","evt","val","useEffect","document","getElementById","getContext","location","reload","App","exact","path","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.530fb64b.chunk.js","sourcesContent":["import { populate, moveCreature, createCreaturesTillMinimum } from \"./creature\"\nimport { sow } from './plant'\n\nlet creatures = []\nlet plants = []\nlet mainInterval\nlet ctx\n\nconst loop = (props) => {\n  const creaturesLength = creatures.length \n  for (let i = creaturesLength - 1; i >= 0; i--) {\n    moveCreature({ id: i, creatures, plants, ...props });\n  }\n  drawWorld();\n  if (creatures.length === 0) {\n    clearInterval(mainInterval);\n  }\n  creatures = createCreaturesTillMinimum({ creatures, ...props });\n  sow({ creatures, plants, ...props })\n}\n\nconst drawWorld = () => {\n  ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n  let plantsCount = plants.length;\n  for (let i = 0; i < plantsCount; i++) {\n    plants[i].draw(ctx);\n  }\n  let creaturesCount = creatures.length;\n  for (let i = 0; i < creaturesCount; i++) {\n    creatures[i].draw(ctx);\n  }\n}\n\nexport const handleStart = ({ context, ...props }) => {\n  ctx = context\n\n  ctx.width = props.mapSize\n  ctx.height = props.mapSize\n\n  clearInterval(mainInterval);\n  creatures = populate({ ...props })\n  plants = sow({ creatures, plants, ...props })\n\n  mainInterval = setInterval(() => loop(props), props.speed);\n}\n\nexport const handleStop = () => {\n  clearInterval(mainInterval);\n}\n\nexport const handleReset = (window) => {\n  window.location.reload()\n  clearInterval(mainInterval)\n}\n\n\n\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\n\nconst RangeInput = ({label, ...otherProps}) => {\n    return (\n        <>\n        <Typography variant='overline'>\n           {label}\n        </Typography>\n        <Slider {...otherProps}/>\n        </>\n    );\n};\n\nexport default RangeInput;","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\nimport RangeInput from './RangeInput';\n\nimport Divider from '@material-ui/core/Divider';\n\nconst useStyles = makeStyles((theme) => ({\n    wrapper: {\n        '& .MuiTextField-root, .MuiSlider-root, .MuiTypography-root': {\n            margin: theme.spacing(1),\n            width: '96%',\n        },\n\n        background: '#c1c1c1',\n    },\n    controlButtons: {\n        '& .MuiButtonBase-root': {\n            width: '96%',\n        },\n\n        '& .MuiGrid-item': {\n            width: 200\n        },\n\n        width: '100%',\n        marginBottom: theme.spacing(1)\n    },\n    divider: {\n        margin: theme.spacing(2)\n    }\n}));\n\n\n\nconst Form = ({\n    started,\n    creatureFields,\n    rangeFields,\n    energyFields,\n    handleStart,\n    handleStop,\n    handleReset\n }) => {\n    const classes = useStyles()\n\n    return (\n        <Grid\n            container\n            direction='column'\n            justify='center'\n            className={classes.wrapper}>\n            {creatureFields.map(fieldProps => (\n                <Grid item key={fieldProps.id}>\n                    <TextField\n                        type='number'\n                        required\n                        disabled={started}\n                        {...fieldProps}\n                    />\n                </Grid>\n            ))}\n            <Divider className={classes.divider} />\n            {energyFields.map(fieldProps => (\n                <Grid item key={fieldProps.id}>\n                    <TextField\n                        type='number'\n                        required\n                        disabled={started}\n                        {...fieldProps}\n                    />\n                </Grid>\n            ))}\n            <Divider className={classes.divider} />\n            {rangeFields.map((fieldProps) => (\n                <Grid item key={fieldProps.id}>\n                    <RangeInput {...fieldProps} disabled={started} />\n                </Grid>\n            ))}\n\n            <Grid container alignItems='center' justify='space-around' className={classes.controlButtons}>\n                {!started ? (\n                    <Grid item>\n                        <Button variant='contained' color='primary' onClick={handleStart}> START</Button>\n                    </Grid>\n                ) : (\n                        <>\n                            <Grid item>\n                                <Button variant='contained' color='primary' onClick={() => handleReset(window)}> RESET</Button>\n                            </Grid>\n                            <Grid item>\n                                <Button variant='contained' color='primary' onClick={handleStop}> STOP</Button>\n                            </Grid>\n                        </>\n                    )\n                }\n            </Grid>\n\n        </Grid>\n    );\n};\n\nexport default Form;","export const DEFAULT_SETTINGS = {\n    creaturesInitCount: 100,\n    creaturesMinCount: 80,\n    creaturesStartingEnergy: 120,\n    creaturesLifespan: 300,\n\n    worldMaxEnergy: 50000,\n    plantsEnergy: 50,\n\n    minMapSize: 50,\n    maxMapSize: 200,\n    mapSizeValue: 100,\n\n    speed: 50,\n    minSpeed: 1,\n    maxSpeed: 100,\n\n    frame: \"every\",\n    interval: 50,\n};\n\nexport const NEURON_SETTINGS = {\n    creatureNeuronCount : 5,\n    neuronInputCount: 3,\n    neuronStimulationThreshold: 5,\n    mutation1: 0.1,\n    mutation2: 0.7,\n    mutation1Probability: 0.01,\n    mutation2Probability: 0.01,\n}\n\nexport const PLANT_SETTINGS = {\n    plantBreedMethod : 'random',\n    feedingDistance: 0.01,\n    diagonal: 141,\n}\n\nexport const MAX_NEURON_COUNT = 5;\n\nexport const ACTION_BREED = 0;\nexport const ACTION_UP = 1;\nexport const ACTION_DOWN = 2;\nexport const ACTION_LEFT = 3;\nexport const ACTION_RIGHT = 4;\nexport const ACTION_NO_ACTION = 5;\n","import { NEURON_SETTINGS} from './constants'\n\nexport const createNeuron = (weights) =>  {\n    const stimulate = (stimulation) =>  {\n        let stimulantsNumber = stimulation.length;\n        let e = weights[0];\n        for (let i=0; i<stimulantsNumber; i++) {\n            e += weights[i+1]*stimulation[i];\n        }\n        if (e > NEURON_SETTINGS.neuronStimulationThreshold) {\n            return 1;\n        }\n        else {\n            return 0;\n        } \n    }\n    return {\n        weights,\n        stimulate: stimulate\n    };\n}","import {\n    NEURON_SETTINGS,\n    ACTION_NO_ACTION\n} from './constants'\n\nimport { createNeuron } from './n'\n\nconst randomInt = (min, max) => (Math.floor(Math.random() * (max - min + 1)) + min)\n\nexport const createNN = () =>  {\n    let neurons = new Array(NEURON_SETTINGS.creatureNeuronCount)\n\n    for (let i=0; i<NEURON_SETTINGS.creatureNeuronCount; i++) {\n        let weights = new Array(NEURON_SETTINGS.neuronInputCount+1);\n        for (let k=0; k<NEURON_SETTINGS.neuronInputCount+1; k++) {\n            weights[k] = 0;\n        }\n        neurons[i] = createNeuron(weights);\n    }\n    \n    const randomize = () => {\n        for (let i=0; i<NEURON_SETTINGS.creatureNeuronCount; i++) {\n            for (let k=0; k<NEURON_SETTINGS.neuronInputCount+1; k++) {\n                neurons[i].weights[k] = (Math.random() - 0.5) * 100.0;\n            }\n        }\n    }\n\n    const decide = (stimulations) => {\n        const indexes = [];\n        for (let i=0; i<NEURON_SETTINGS.creatureNeuronCount; i++) {\n            if(neurons[i].stimulate(stimulations[i]) === 1) {\n                indexes.push(i);\n            }\n        }\n        if (indexes.length === 0) {\n            return ACTION_NO_ACTION;\n        }\n        else {\n            return indexes[randomInt(0, indexes.length)];\n        } \n    }\n\n    const cloneWithMutation = () => {\n        let child = createNN();\n        for (let i=0; i<NEURON_SETTINGS.creatureNeuronCount; i++) {\n            for (let k=0; k<NEURON_SETTINGS.neuronInputCount+1; k++) {\n                let mutatedWeight = neurons[i].weights[k];\n                if (Math.random() < NEURON_SETTINGS.mutation1Probability) {\n                    if (Math.random() > 0.5) {\n                        mutatedWeight *= 1 + NEURON_SETTINGS.mutation1;\n                    }\n                    else {\n                        mutatedWeight *= 1 - NEURON_SETTINGS.mutation1;\n                    }\n                }\n                child.neurons[i].weights[k] = mutatedWeight;\n            }\n        }\n        return child;\n    }\n\n    const cross = (partner) => {\n        let child = createNN();\n        for (let i=0; i<NEURON_SETTINGS.creatureNeuronCount; i++) {\n            for (let k=0; k<NEURON_SETTINGS.neuronInputCount+1; k++) {\n                let mutatedWeight = 0.66*neurons[i].weights[k] + 0.34*partner.neurons[i].weights[k];\n                if (Math.random() > NEURON_SETTINGS.mutation1Probability) {\n                    if (Math.random() > 0.5) {\n                        mutatedWeight *= 1 + NEURON_SETTINGS.mutation1;\n                    }\n                    else {\n                        mutatedWeight *= 1 - NEURON_SETTINGS.mutation1;\n                    }\n                }\n                if (Math.random() > NEURON_SETTINGS.mutation2Probability) {\n                    if (Math.random() > 0.5) {\n                        mutatedWeight *= 1 + NEURON_SETTINGS.mutation2;\n                    }\n                    else {\n                        mutatedWeight *= 1 - NEURON_SETTINGS.mutation2;\n                    }\n                }\n                child.neurons[i].weights[k] = mutatedWeight;\n            }\n        }        \n        return child;\n    }\n\n    return {\n        neurons,\n        decide: decide,\n        randomize: randomize,\n        cloneWithMutation: cloneWithMutation,\n        cross: cross,\n    };\n}","import {\n    MAX_NEURON_COUNT,\n    NEURON_SETTINGS,\n    ACTION_BREED,\n    ACTION_UP,\n    ACTION_DOWN,\n    ACTION_LEFT,\n    ACTION_RIGHT,\n    ACTION_NO_ACTION,\n    PLANT_SETTINGS,\n} from './constants'\n\nimport { createNN } from './nn'\n\n\n\nconst randomInt = (min, max) => (Math.floor(Math.random() * (max - min + 1)) + min)\n\nconst distance = (creatureA, creatureB, diagonal) => Math.sqrt(Math.pow(creatureA.X - creatureB.X, 2) + Math.pow(creatureA.Y - creatureB.Y, 2)) / diagonal\n\nconst sin = (creatureA, creatureB,diagonal) => (creatureB.Y - creatureA.Y) / distance(creatureA, creatureB,diagonal) / diagonal\n\nconst cos = (creatureA, creatureB,diagonal) => (creatureB.X - creatureA.X) / distance(creatureA, creatureB,diagonal) / diagonal\n\n\nexport const populate = ({ creatures,\n    creaturesInitCount,\n    mapSize,\n    creaturesStartingEnergy,\n    ...rest }) => {\n    creatures = new Array(creaturesInitCount);\n    for (let i = 0; i < creaturesInitCount; i++) {\n        creatures[i] = createCreature({\n            locationCoordinateX: randomInt(0, mapSize),\n            locationCoordinateY: randomInt(0, mapSize),\n            mapSize,\n            creaturesStartingEnergy,\n            ...rest\n        });\n        creatures[i].nn.randomize();\n        creatures[i].energy = creaturesStartingEnergy;\n    }\n    return creatures\n}\n\nconst createCreature = ({ locationCoordinateX, locationCoordinateY, mapSize, creaturesStartingEnergy }) => {\n    \n    let X = locationCoordinateX\n    let Y = locationCoordinateY\n    let energy = creaturesStartingEnergy\n    let nn = createNN(MAX_NEURON_COUNT, NEURON_SETTINGS.neuronInputCount)\n\n    const randomizeLocation = () => {\n        X = randomInt(0, mapSize);\n        Y = randomInt(0, mapSize);\n    }\n\n    const clone = () => {\n        let locationX = X + randomInt(0, 2) - 1\n        let locationY = Y + randomInt(0, 2) - 1\n        if (locationX < 0) { locationX = 0 }\n        if (locationX >= mapSize) { locationX = mapSize - 1 }\n        if (locationY < 0) { locationY = 0; }\n        if (locationY >= mapSize.Y) { locationY = mapSize - 1; }\n\n        let child = createCreature({locationCoordinateX: locationX, locationCoordinateY: locationY, mapSize,\n            creaturesStartingEnergy,\n            });\n        child.nn = nn.cloneWithMutation();\n        child.energy = creaturesStartingEnergy\n        energy -= creaturesStartingEnergy\n        return child;\n    }\n\n    const breed = (partner) => {\n        const locationX = Math.floor((X + partner.X) / 2);\n        const locationY = Math.floor((Y + partner.Y) / 2);\n        let child = createCreature({locationCoordinateX: locationX, locationCoordinateY: locationY, mapSize,\n            creaturesStartingEnergy,\n            });\n        child.nn = nn.cross(partner.nn);\n        child.energy = creaturesStartingEnergy;\n        energy -= creaturesStartingEnergy;\n        return child;\n    }\n\n    const normalizeEnergy = () => {\n        return energy / (3 * creaturesStartingEnergy);\n    }\n\n    const react = (plantSin, plantCos) => {\n        let stimulations = new Array(NEURON_SETTINGS.creatureNeuronCount);\n\n        for (let i = 0; i < NEURON_SETTINGS.creatureNeuronCount; i++) {\n            stimulations[i] = new Array(NEURON_SETTINGS.neuronInputCount);\n            stimulations[i][0] = normalizeEnergy();\n            stimulations[i][1] = plantSin;\n            stimulations[i][2] = plantCos;\n        }\n        let decision = nn.decide(stimulations);\n        if ((decision === ACTION_BREED) && (energy < creaturesStartingEnergy)) {\n            energy -= 1;\n            return ACTION_NO_ACTION;\n        }\n        if ((decision === ACTION_RIGHT) && (X < mapSize - 1)) {\n            X += 1;\n        }\n        if ((decision === ACTION_LEFT) && (X > 0)) {\n            X -= 1;\n        }\n        if ((decision === ACTION_UP) && (Y < mapSize - 1)) {\n            Y += 1;\n        }\n        if ((decision === ACTION_DOWN) && (Y > 0)) {\n            Y -= 1;\n        }\n        return {decision, X, Y} ;\n    }\n\n    const draw = (ctx) => {\n        ctx.fillStyle = \"#FF0000\";\n        let centerX = X * ctx.canvas.width / mapSize;\n        let centerY = Y * ctx.canvas.height / mapSize;\n        let rectWidth = ctx.canvas.width / mapSize;\n        let rectHeight = ctx.canvas.height / mapSize;\n        ctx.fillRect(centerX, centerY, rectWidth, rectHeight);\n    }\n\n    return {\n        energy,\n        age: 0,\n        X,\n        Y,\n        nn,\n        clone: clone,\n        breed: breed,\n        react: react,\n        draw: draw,\n        normalizeEnergy: normalizeEnergy,\n        randomizeLocation: randomizeLocation,\n    };\n}\n\nexport const createCreaturesTillMinimum = ({creatures, creaturesMinCount, mapSize, creaturesStartingEnergy}) => {\n    var fillCount = creaturesMinCount - creatures.length;\n    if (fillCount > 0) {\n        for (var i=0; i<fillCount; i++) {\n            let creature = createCreature({locationCoordinateX: 0, locationCoordinateY: 0, mapSize,\n                creaturesStartingEnergy,\n                })\n            creature.randomizeLocation()\n            creature.nn.randomize()\n            creatures.push(creature)\n        }\n    }\n    return creatures\n}\n\nconst getClosestCreature = ({ creatures, id ,diagonal}) =>{\n    let closestCreatureid = -1\n    let smallestDistance = 999999\n    for (let i = 0; i < creatures.length; i++) {\n        if (i !== id) {\n            if (distance(creatures[i], creatures[id],diagonal) < smallestDistance) {\n                smallestDistance = distance(creatures[i], creatures[id],diagonal);\n                closestCreatureid = i;\n            }\n        }\n    }\n    return closestCreatureid;\n}\n\nconst getClosestPlant = ({ creatures, plants, id,diagonal }) => {\n    let closestPlantid = -1\n    let smallestDistance = 999999\n    for (let i = 0; i < plants.length; i++) {\n        if (distance(plants[i], creatures[id],diagonal) < smallestDistance) {\n            smallestDistance = distance(plants[i], creatures[id], diagonal);\n            closestPlantid = i;\n        }\n    }\n    return closestPlantid;\n}\n\nexport const moveCreature = ({ creatures, plants,mapSize, id, creaturesLifespan }) => {\n    const diagonal = Math.sqrt(Math.pow(mapSize, 2) + Math.pow(mapSize, 2));\n    let closestPlantid = getClosestPlant({ id, creatures, plants,diagonal });\n\n    if (closestPlantid !== -1) {\n        \n        let reaction = creatures[id].react(sin(creatures[id], plants[closestPlantid],diagonal), cos(creatures[id], plants[closestPlantid], diagonal));\n        let distanceToClosestPlant = distance(creatures[id], plants[closestPlantid], diagonal);\n        \n        creatures[id].X = reaction.X\n        creatures[id].Y = reaction.Y\n       \n        if (reaction === ACTION_BREED) {\n            if (Math.random() < 0.5) {\n                creatures.push(creatures[id].clone());\n            }\n            else if (creatures.length > 1) {\n                creatures.push(creatures[id].breed(creatures[getClosestCreature({creatures,id, diagonal})]));\n            }\n        }\n        \n        if (distanceToClosestPlant < PLANT_SETTINGS.feedingDistance) {\n            creatures[id].energy += plants[closestPlantid].energy;\n            plants.splice(closestPlantid, 1);\n        }\n    }\n\n    creatures[id].energy -= 1;\n    creatures[id].age += 1;\n    if ((creatures[id].energy <= 0) || (creatures[id].age > creaturesLifespan)) {\n        creatures.splice(id, 1);\n    }\n\n    return { newCreatures: creatures , newPlants: plants}\n}\n","\nimport { PLANT_SETTINGS } from './constants'\nconst randomInt = (min, max) => (Math.floor(Math.random() * (max - min + 1)) + min)\n\nexport const createPlant = ({ X, Y, energy, mapSize }) => {\n    function draw(ctx) {\n        ctx.fillStyle = \"#00FF00\";\n        ctx.globalAlpha = 0.6;\n        var centerX = X * (ctx.canvas.width - 4) / mapSize;\n        var centerY = Y * (ctx.canvas.height - 4) / mapSize;\n        var rectWidth = (ctx.canvas.width - 4) / mapSize;\n        var rectHeight = (ctx.canvas.height - 4) / mapSize;\n        ctx.fillRect(centerX + rectWidth / 2, centerY + rectHeight / 2, rectWidth, rectHeight);\n    }\n\n    return {\n        X,\n        Y,\n        energy: energy,\n        draw: draw,\n    };\n}\n\nexport const sow = ({ worldMaxEnergy, creatures, plants, plantsEnergy, mapSize }) => {\n    const getCreaturesTotalEnergy = () => {\n        var energy = 0;\n        for (var i = 0; i < creatures.length; i++) {\n            energy += creatures[i].energy;\n        }\n\n        return energy;\n    }\n\n    const getPlantsEnergyTotal = () => {\n        var plantsCount = plants.length;\n        var energy = 0;\n        for (var i = 0; i < plantsCount; i++) {\n            energy += plants[i].energy;\n        }\n        return energy;\n    }\n\n\n    var plantNumber = Math.floor((worldMaxEnergy - getCreaturesTotalEnergy() - getPlantsEnergyTotal()) / plantsEnergy);\n\n    if (plantNumber < 1) {\n        return 0;\n    }\n    if (PLANT_SETTINGS.plantBreedMethod === \"random\") {\n        for (var i = 0; i < plantNumber; i++) {\n            plants.push(createPlant({X: randomInt(0, mapSize - 1), Y: randomInt(0, mapSize - 1), energy: plantsEnergy, mapSize}));\n        }\n    }\n   \n    return plants\n}","import React, { useState, useEffect } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Form from '../Form/Form';\nimport { DEFAULT_SETTINGS } from './constants';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { handleStart, handleStop, handleReset } from './utils.js'\n\nconst useStyles = makeStyles((theme) => ({\n    wrapper: {\n        width: '100%'\n    },\n    form: {\n        width: '25%'\n    },\n    canvas: {\n        width: '70%'\n    }\n\n\n}));\n\n\nconst View = () => {\n\n    const classes = useStyles()\n    const [context, setContext] = useState(null)\n\n    const [started, setStarted] = useState(false)\n    const [creaturesInitCount, setCreaturesInitCount] = useState(DEFAULT_SETTINGS.creaturesInitCount)\n    const [creaturesMinCount, setCreaturesMinCount] = useState(DEFAULT_SETTINGS.creaturesMinCount)\n    const [creaturesLifespan, setCreaturesLifespan] = useState(DEFAULT_SETTINGS.creaturesLifespan)\n    const [creaturesStartingEnergy, setCreaturesStartingEnergy] = useState(DEFAULT_SETTINGS.creaturesStartingEnergy)\n\n    const [worldMaxEnergy, setWorldMaxEnergy] = useState(DEFAULT_SETTINGS.worldMaxEnergy)\n    const [plantsEnergy, setPlantsEnergy] = useState(DEFAULT_SETTINGS.plantsEnergy)\n\n    const [mapSize, setMapSize] = useState(DEFAULT_SETTINGS.mapSizeValue)\n    const [speed, setSpeed] = useState(DEFAULT_SETTINGS.speed)\n\n    const onStart = () => {\n        setStarted(true)\n        handleStart({\n            creaturesInitCount,\n            creaturesMinCount,\n            creaturesLifespan,\n            creaturesStartingEnergy,\n            worldMaxEnergy,\n            plantsEnergy,\n            mapSize,\n            speed,\n            context\n        })\n    }\n\n    const onStop = () => {\n        handleStop()\n    }\n\n    const onReset = (window) => {\n        setStarted(false)\n        handleReset(window)\n    } \n\n    const creatureFields = [\n        {\n            id: 'creaturesInitCount',\n            label: 'poczatkowa liczba stworzen',\n            value: creaturesInitCount,\n            onChange: ({ target }) => setCreaturesInitCount(target.value)\n        },\n        {\n            id: 'creaturesMinCount',\n            label: 'minimalna liczba stworzen',\n            value: creaturesMinCount,\n            onChange: ({ target }) => setCreaturesMinCount(target.value)\n        },\n        {\n            id: 'creaturesStartingEnergy',\n            label: 'poczatkowa energia stworzen',\n            value: creaturesStartingEnergy,\n            onChange: ({ target }) => setCreaturesStartingEnergy(target.value)\n        },\n        {\n            id: 'creaturesLifespan',\n            label: 'dlugosc zycia stworzen',\n            value: creaturesLifespan,\n            onChange: ({ target }) => setCreaturesLifespan(target.value)\n        }\n    ]\n\n    const energyFields = [\n        {\n            id: 'worldMaxEnergy',\n            label: 'energia swiata',\n            value: worldMaxEnergy,\n            onChange: ({ target }) => setWorldMaxEnergy(target.value)\n        },\n        {\n            id: 'plantsEnergy',\n            label: 'energia nowej rosliny',\n            value: plantsEnergy,\n            onChange: ({ target }) => setPlantsEnergy(target.value)\n        },\n    ]\n\n    const rangeFields = [\n        {\n            id: 'mapSize',\n            min: DEFAULT_SETTINGS.minMapSize,\n            max: DEFAULT_SETTINGS.maxMapSize,\n            label: 'rozmiar planszy',\n            value: mapSize,\n            onChange: (evt, val) => setMapSize(val)\n        },\n        {\n            id: 'speed',\n            min: DEFAULT_SETTINGS.minSpeed,\n            max: DEFAULT_SETTINGS.maxSpeed,\n            label: 'predkosc',\n            value: speed,\n            onChange: (evt, val) => setSpeed(val)\n        }\n    ]\n\n    useEffect(() => {\n        setContext(document.getElementById('canvas').getContext('2d'))\n    }, [])\n\n\n    return (\n        <Grid container className={classes.wrapper}>\n            <Grid item className={classes.form}>\n                <Form\n                    creatureFields={creatureFields}\n                    rangeFields={rangeFields}\n                    energyFields={energyFields}\n                    started={started}\n                    handleStart={onStart}\n                    handleStop={onStop}\n                    handleReset={onReset}\n                />\n            </Grid>\n            <Grid item className={classes.canvas}>\n                <canvas id=\"canvas\" width=\"600\" height=\"600\"></canvas>\n            </Grid>\n        </Grid>\n\n    );\n};\n\nexport default View;","import React from 'react';\nimport View from './View/View'\nimport {\n  BrowserRouter as Router,\n  Redirect,\n  Route,\n  Switch\n} from \"react-router-dom\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Route exact path='/life-simulation'>\n          <View />\n        </Route>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}